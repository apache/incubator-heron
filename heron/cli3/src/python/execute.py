import subprocess

import heron.cli3.src.python.opts  as opts
import heron.cli3.src.python.utils as utils
import heron.cli3.src.python.utils as jars

################################################################################
# Execute a heron class given the args and the jars needed for class path
################################################################################
def heron_class(class_name, lib_jars, extra_jars=[], args=[]):

  # construct the command line for the sub process to run
  all_args = [
      "java", "-client", "-Xmx1g", opts.get_heron_config(),
      "-cp", utils.get_classpath(lib_jars + extra_jars),
  ] 

  all_args += [class_name] + list(args)

  # print the verbose message
  if opts.verbose():
    print('$> %s' % ' '.join(all_args))

  # invoke the command with subprocess and print error message, if any
  if not opts.trace_execution():
    status = subprocess.call(all_args)
    if status != 0:
      err_str = "User main failed with status %d. Bailing out..." % status
      raise RuntimeError(err_str) 

def heron_tar(class_name, topology_tar, arguments, tmpdir_root):
  # Extract tar to a tmp folder.
  tmpdir = tempfile.mkdtemp(dir=tmpdir_root, prefix='tmp')

  with contextlib.closing(tarfile.open(topology_tar)) as tar:
    tar.extractall(path=tmpdir)

  # A tar generated by pants has all dependency jars under libs/
  # in addition to the topology jar at top level. Pants keeps 
  # filename for jar and tar the same except for extension.

  # TODO: We need to extract heron-core to separate folder.
  topology_jar = os.path.basename(topology_tar).replace(".tar.gz", "").replace(".tar", "") + ".jar"

  extra_jars = [
      os.path.join(tmpdir, "heron-instance.jar"),
      os.path.join(tmpdir, topology_jar),
      os.path.join(tmpdir, "*"),
      os.path.join(tmpdir, "libs/*")
  ]

  lib_jars = utils.get_heron_libs(jars.topology_jars())

  # Now execute the class
  heron_class(class_name, lib_jars, extra_jars, arguments)
