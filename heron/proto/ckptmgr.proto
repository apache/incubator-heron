package heron.proto.ckptmgr;
option java_package = "com.twitter.heron.proto.ckptmgr";
option java_outer_classname = "CheckpointManager";

import "common.proto";
import "physical_plan.proto";

// message stored in zk by the tmaster
message StatefulMostRecentCheckpoint {
  required string checkpoint_id = 1;
}

// tmaster -> stmgr messages

// Message sent to stmgrs by the tmaster to initiate checkpointing
message StartStatefulCheckpoint {
  required string checkpoint_id = 1;
}

// Message sent by tmaster to stmgr asking them to reset their instances
// to this checkpoint
message ResetTopologyState {
  required string checkpoint_id = 1;
}

// Message sent by stmgr to tmaster asking it to reset the topology
// to some valid checkpoint. This is sent either if stmgr dies
// and comes back up or if an instance dies.
message ResetTopologyStateRequest {
  required string reason = 1;
}

// stmgr -> ckptmgr messages

// This is the message that a stmgr sends
// when it wants to establish the connection
// with checkpoint manager
message RegisterStMgrRequest{
  required string topology_name = 1;
  required string topology_id = 2;
  required string stmgr = 3;
}

// This is the message that checkpoint manager
// sends when it receives the register request
// from stmgr
message RegisterStMgrResponse {
  required heron.proto.system.Status status = 1;
}

// This is the message that StMgr sends to Checkpoint Mgr
// to store instance checkpoint data
message SaveStateCheckpoint {
  // Information about the instance whose state this is
  required heron.proto.system.Instance instance = 1;
  required InstanceStateCheckpoint checkpoint = 2;
}

// This is the message that StMgr sends to Checkpoint Mgr
// to restore instance checkpoint data
message RestoreStateCheckpointRequest {
  required heron.proto.system.Instance instance = 1;
  required string checkpoint_id = 2;
}

// This is the response that Checkpoint Mgr sends to StMgr
// for its restore request
message RestoreStateCheckpointResponse {
  required heron.proto.system.Status status = 1;
  required string checkpoint_id = 2;
  optional InstanceStateCheckpoint checkpoint = 3;
}

// stmgr -> Instance messages

// This is the message that the stmgr sends to its
// local tasks to begin initiating checkpoint
message InitiateStatefulCheckpoint {
  required string checkpoint_id = 1;
}

// This is the message that the instance sends
// when it wants stmgr to store its state
message InstanceStateCheckpoint {
  required string checkpoint_id = 1;
  required bytes state = 2;
}

// This is the message that stmgr sends to its instace
// asking them to reset their state
message ResetInstanceState {
  required InstanceStateCheckpoint state = 1;
}

// stmgr -> stmgr messages

// This is the message that stmgr sends to other stmgr
// to send it to downstream task
message DownstreamStatefulCheckpoint {
  required int32 origin_task_id = 1; 
  required int32 destination_task_id = 2; 
  required string checkpoint_id = 3;
}
