#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

# scheduler class for distributing the topology for execution
heron.class.scheduler:                       org.apache.heron.scheduler.aurora.AuroraScheduler

# launcher class for submitting and launching the topology
heron.class.launcher:                        org.apache.heron.scheduler.aurora.AuroraLauncher

# location of java - pick it up from shell environment
heron.directory.sandbox.java.home:           /usr/lib/jvm/java-1.8.0-openjdk-amd64/

# Invoke the IScheduler as a library directly
heron.scheduler.is.service:                  False

####################################################################
# Following are Aurora-specific
####################################################################
# The maximum retry attempts when trying to kill an Aurora job
heron.scheduler.job.max.kill.attempts:       5

# The interval in ms between two retry-attempts to kill an Aurora job
heron.scheduler.job.kill.retry.interval.ms:  2000

# Aurora Controller Class
# heron.class.scheduler.aurora.controller.cli:     False

####################################################################
# Following are config for tunneling
####################################################################
# Whether we should attempt to tunnel if there is no direct access to a remote host (e.g. TManager)
heron.scheduler.is.tunnel.needed:                          False

# The connection timeout in ms when testing if we can connect to remote host
heron.scheduler.tunnel.connection.timeout.ms:              1000

# The number of retries when testing direct access to remote host
heron.scheduler.tunnel.connection.retry.count:             2

# The interval in ms between two retries when testing direct access to remote host
heron.scheduler.tunnel.retry.interval.ms:                  1000

# The number of retries when verifying connectivity via tunnel
heron.scheduler.tunnel.verify.count:                       10

# SSH tunnel host
heron.scheduler.tunnel.host:                               "my.tunnel.host"
