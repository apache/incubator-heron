# Copyright 2016 Twitter. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
'''response.py'''
from heron.common.src.python.utils.log import Log

# Meaning of exit status code:
#  - status code = 0:
#    program exits without error
#  - 0 < status code < 100:
#    program fails to execute before program execution. For example,
#    JVM cannot find or load main class
#  - status code >= 100:
#    program fails to launch after program execution. For example,
#    topology definition file fails to be loaded
#

# If you need to add new class of status code, please assign it value larger than
# value of the last class of status code
# pylint: disable=no-init
class Status(object):
  """Status code enum"""
  Ok = 0
  InvocationError = 1
  HeronError = 100

def status_type(status_code):
  if status_code == 0:
    return Status.Ok
  elif status_code < 100:
    return Status.InvocationError
  else:
    return Status.HeronError

class Response(object):
  """Response class that captures result of executing an action

     If the response object is generated by a statement that
     shells out program, `msg` is stdout, `detailed_msg` is stderr
  """
  def __init__(self, status_code, msg=None, detailed_msg=None):
    self.status = status_type(status_code)
    self.msg = msg
    self.detailed_msg = detailed_msg
    self.err_context = None
    self.succ_context = None

  def add_context(self, err_context, succ_context=None):
    """ Prepend msg to add some context information

    :param pmsg: context info
    :return: None
    """
    self.err_context = err_context
    self.succ_context = succ_context

def render(resp):
  def do_log(log, msg):
    if msg:
      log(msg)
  if isinstance(resp, list):
    for r in resp:
      render(r)
  elif isinstance(resp, Response):
    if resp.status == Status.Ok:
      do_log(Log.info, resp.succ_context)
      do_log(Log.info, resp.msg)
      do_log(Log.debug, resp.detailed_msg)
    elif resp.status == Status.HeronError:
      do_log(Log.error, resp.err_context)
      do_log(Log.error, resp.msg)
      do_log(Log.debug, resp.detailed_msg)
    # If status code is InvocationError, invocation of shelled-out program fails. The error
    # message will be in stderr, so we log.error detailed message(stderr) only
    elif resp.status == Status.InvocationError:
      do_log(Log.error, resp.detailed_msg)
    else:
      raise RuntimeError("Unknown status type of value %d", resp.status)
  else:
    raise RuntimeError("Unknown response instance: %s", str(resp.__class__))

# check if all responses are successful
def isAllSuccessful(resps):
  if isinstance(resps, list):
    return all([resp.status == Status.Ok for resp in resps])
  elif isinstance(resps, Response):
    return resps.status == Status.Ok
  else:
    raise RuntimeError("Unknown response instance: %s", str(resps.__class__))
